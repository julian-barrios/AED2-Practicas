Representación:
	matrizf se representa con estr donde 
		estr es tupla ⟨	alto:	nat,
										ancho: nat, 
										celdasNoNulas: lista(tupla ⟨ fil: nat, col: nat, valor: nat⟩)⟩

Solución Informal:
	- Las filas y columnas de cada elemento deberá estar dentro de las dimensiones de la matriz.
	- La lista deberá estar ordenada primero por fila y luego por columna.
		---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	(∀i: ℕ)(i < longitud(e.celdasNoNulas) ⇒ (e.celdasNoNulas[i].fil < e.alto ∧ e.celdasNoNulas[i].col < e.ancho))) 
		(2) ≡ (∀i: ℕ)(i < longitud(e.celdasNoNulas) - 1 ⇒ ((e.celdasNoNulas[i].fil = e.celdasNoNulas[i+1].fil ⇒ e.celdasNoNulas[i].col < e.celdasNoNulas[i+1].col) ∧ 
																											 (e.celdasNoNulas[i].fil ≠ e.celdasNoNulas[i+1].fil ⇒ e.celdasNoNulas[i].fil < e.celdasNoNulas[i+1].fil))) 
																								
---
Interfaz:
		---		
	Algoritmos del módulo:
		iCrear(in alto: nat, in ancho: nat) → res: matrizf				// O(1)
			res ← ⟨alto, ancho, Vacia()⟩														// O(1)
	---
		iFilas(in m: matrizf) → res: nat													// O(1)	
			res ← m.alto																						// O(1)	
	---
		iColumnas(in m: matrizf) → res: nat												// O(1)	
			res ← m.ancho																						// O(1)	
	---
		iDefinir(inout m: matrizf, in fila: nat, in columna: nat, in nuevoValor: nat)																							// O(n)	 
			itLista it ← crearIt(m.celdasNoNulas)																																										// O(1)
			while HaySiguiente(it) ∧L (Siguiente(it).fil < fila ∨ (Siguiente(it).fil = fila ∧ Siguiente(it).col < columna)) do			// O(n)
				Avanzar(it)																																																						// O(1)
			end while
			if HaySiguiente(it) ∧L (Siguiente(it).fil = fila ∧ Siguiente(it).col = columna) then																		// O(1)		
				Siguiente(it).valor ← nuevoValor																																											// O(1)				
			else
				AgregarComoSiguiente(it, ⟨fila, columna, nuevoValor⟩)																																	// O(1)
			fi
	---		
		iObtener(in m: matrizf, in fila: nat, in columna: nat) → res: nat							// O(n)
			itLista it ← crearIt(m.celdasNoNulas)																				// O(1)
			nat res ← 0 																																// O(1)
			while HaySiguiente(it) do																										// O(n)
				if Siguiente(it).fil = fila ∧ Siguiente(it).col = columna then						// O(1)
					res ← Siguiente(it).valor																								// O(n)	
				else
					Avanzar(it)																															// O(1)	
				fi
			end while
	---	
		iSumar(in m1: matrizf, in m2: matrizf) → res: matrizf																																																		// O(n+m)
			itLista it1 ← crearIt(m1.celdasNoNulas)																																																								// O(1)
			itLista it2 ← crearIt(m2.celdasNoNulas)																																																								// O(1)
			lista(⟨nat, nat, nat⟩) Celdas ← Vacia()																																																								// O(1)						
			while HaySiguiente(it1) ∧ HaySiguiente(it2) do																																																				// O(n+m)
				if (Siguiente(it1).fil = Siguiente(it2).fil ∧ Siguiente(it1).col = Siguiente(it2).col) then																													// O(1)	
					AgregarAtras(Celdas, ⟨Siguiente(it1).fil, Siguiente(it1).col, Siguiente(it1).valor + Siguiente(it2).valor⟩)																				// O(1)	
					Avanzar(it1)																						 																																													// O(1)	
					Avanzar(it2)																																																																			// O(1)	
				else if Siguiente(it1).fil < Siguiente(it2).fil ∨ (Siguiente(it1).fil = Siguiente(it2).fil ∧ Siguiente(it1).col < Siguiente(it2).col) then					// O(1) 		
					AgregarAtras(Celdas, ⟨ Siguiente(it1).fil, Siguiente(it1).col, Siguiente(it1).valor⟩)																															// O(1)	
					Avanzar(it1)																																																																			// O(1)	
				else
					AgregarAtras(Celdas, ⟨ Siguiente(it2).fil, Siguiente(it2).col, Siguiente(it2).valor⟩)																															// O(1)	
					Avanzar(it2)																																																																			// O(1)
				fi
			end while
			while HaySiguiente(it1) do																																																														// O(n+m)
				AgregarAtras(Celdas, ⟨ Siguiente(it1).fil, Siguiente(it1).col, Siguiente(it1).valor⟩)																																// O(1)
				Avanzar(it1)																																																																				// O(1)
			end while
			while HaySiguiente(it2) do																																																														// O(n+m)
				AgregarAtras(Celdas, ⟨ Siguiente(it2).fil, Siguiente(it2).col, Siguiente(it2).valor⟩)																																// O(1)	
				Avanzar(it2)																																																																				// O(1)	
			end while
			res ← Crear(m1.alto, m.ancho)																																																													// O(1)
			res.celdasNoNulas ← Celdas 																																																														// O(n+m)
			
			
	---











		
		
