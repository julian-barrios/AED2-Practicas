Representación:
	txt se representa con estr donde 
		estr es tupla ⟨				texto: arreglo(palabra),
									 		 palabras: diccTrie(palabra, conj(nat)) 
									 masRepetidas: conjTrie(palabra)⟩

Solución Informal:
	- e.arg₀ + 1 debe ser ...
	- si e.arg₁ ...
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	txt	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: txt | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Algoritmos del módulo:
	icambiarPalabra(in anterior: palabra, in nueva: palabra, inout t: txt)
		posiciones ← Significado(t.palabras, anterior) 																	// O(1)
		itPosiciones ← crearIt(posiciones)																					  	// O(1)	
		while HaySiguiente?(itPosiciones) do																				  	// O(k)	
			t.texto[Siguiente(itPosiciones)] ← nueva																			// O(1)
			if Definido?(t.palabras, nueva) then
				AgregarRapido(Significado(t.palabras, nueva), Siguiente(itPosiciones)) 			// O(1)
			else
				arregloVacio ← crearArreglo(0)
				DefinirRapido(t.palabras, nueva, arregloVacio)															// O(1)
				AgregarRapido(Significado(t.palabras, nueva), Siguiente(itPosiciones)) 			// O(1)
			end if
			Avanzar(itPosiciones) 																												// O(1)
		end while
		itMasRepetidas ← crearIt(t.masRepetidas)
		if (Cardinal(Significado(t.palabras, nueva)) > Siguiente(itMasRepetidas)) then	// O(1)
			t.masRepetidas ← Vacio()																											// O(1)
			AgregarRapido(t.masRepetidas, nueva)																					// O(1)
		else if (Cardinal(Significado(t.palabras, nueva)) = Siguiente(itMasRepetidas))	// O(1)	
			AgregarRapido(t.masRepetidas, nueva)																					// O(1)
		end if
		Borrar(e.palabras, anterior)																										// O(1)
		
---
		
		isubtexto(in inicio: nat, in fin: nat, in t: txt) -> res: txt
			res <- crearArreglo(fin-inicio) 																							// O(fin - inicio)
			i ← inicio																																		// O(1)
			while i < fin do																															// O(fin - inicio)
				res[i] ← t[i]																																// O(1)
				i ← i + 1
			end while
---
		
		iagPalabra(in nueva: palabra, in t: txt) -> res: txt
			res ← crearArreglo(tam(t.texto) + 1)
			i ← 0
			while i < tam(res) - 1 do
				res[i] ← t[i]
			end while
			res[tam(res)-1] ← nueva
			
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
